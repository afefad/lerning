
Начало файла: E:\school\Coding\PyCharm\123.py ->

n = int(input("Количество чисел в последовательности: "))
cipher_count = 0
for _ in range(n):
    new_number = int(input("Введите число: "))
    while new_number:
        if new_number % 10 > 5:
            cipher_count += 1
        new_number //= 10
else:
    print(cipher_count)

<- Конец файла: E:\school\Coding\PyCharm\123.py
****************************************


Начало файла: E:\school\Coding\PyCharm\14.2.py ->

def numeral_count(number):
    if number < 0:
        print('Число отрицательное, обнуляю!')
        return 0

    count = 0
    while number > 0:
        number //= 10
        count += 1

    return count


firstTask, secondTask = int(input()), int(input())

firstNumeral = numeral_count(firstTask)
secondNumeral = numeral_count(secondTask)


if firstNumeral > secondNumeral:
    print('Цифр больше в первом числе')
elif firstNumeral < secondNumeral:
    print('Цифр больше во втором числе')
else:
    print('Равное количество цифр')

<- Конец файла: E:\school\Coding\PyCharm\14.2.py
****************************************


Начало файла: E:\school\Coding\PyCharm\14.3.py ->

vFurstPlanet = 1.43128e14   # км^3
vSecondPlanet = 6.254e13    # км^3
pEarth = 5.5153e12          # кг/км^3

mFirstPlanet = float(input('Масса первой планеты: '))
mSecondPlanet = float(input('Масса Второй планеты: '))

pFirstPlanet = mFirstPlanet / vFurstPlanet
pSecondPlanet = mSecondPlanet / vSecondPlanet

print('Плотность первой планеты:', pFirstPlanet)
print('Плотность второй планеты:', pSecondPlanet)


if abs(pEarth - pFirstPlanet) < abs(pEarth - pSecondPlanet):
    print('Плотность первой планеты ближе к плотности Земли!')
elif abs(pEarth - pFirstPlanet) > abs(pEarth - pSecondPlanet):
    print('Плотность второй планеты ближе к плотности Земли!')
else:
    print('Ты шо, ебынутый?')

print(pEarth)

<- Конец файла: E:\school\Coding\PyCharm\14.3.py
****************************************


Начало файла: E:\school\Coding\PyCharm\14.4.py ->

a = 1.1
b = 2.2
c = a + b
d = 3.3

if abs(c - d) < 1e-15:
    print('Равна')
else:
    print('Не равна')

<- Конец файла: E:\school\Coding\PyCharm\14.4.py
****************************************


Начало файла: E:\school\Coding\PyCharm\14.5.py ->

from math import e, factorial

# Задаётся точность в формате 0.0...1
precision = float(input('Точность: '))

result = 0
i = 0
addMember = 1
while addMember > precision:
    addMember = 1 / factorial(i)
    result += addMember
    i += 1

print('Результат:', result)
print('Константа:', e)

<- Конец файла: E:\school\Coding\PyCharm\14.5.py
****************************************


Начало файла: E:\school\Coding\PyCharm\14.6.py ->

# Задача «Яйца»

# Функция для вычисления среднего значения глубины и уровня опасности на этой глубине
def danger(d_min, d_max):
    # Вычисляем среднее значение между минимальной и максимальной глубинами
    d_middle = (d_min + d_max) / 2
    # Вычисляем уровень опасности по заданной формуле, используя среднее значение глубины
    middle_danger = d_middle ** 3 - 3 * d_middle ** 2 - 12 * d_middle + 10
    # Возвращаем среднее значение глубины и рассчитанный уровень опасности
    return d_middle, middle_danger

# Основная функция для поиска безопасной глубины


def depth_calculation(user_danger_level):
    # Задаём начальные границы глубины: от 0 до 4 метров
    lower_bound = 0
    upper_bound = 4

    # Запускаем бесконечный цикл, который будет завершён при достижении нужного уровня опасности
    while True:
        # Вычисляем среднюю глубину и уровень опасности на этой глубине
        mid, danger_level = danger(lower_bound, upper_bound)

        # Если уровень опасности больше 0, значит, глубина слишком мала — изменяем нижнюю границу
        if danger_level > 0:
            lower_bound = mid
        # Иначе уровень опасности меньше или равен 0, значит, глубина слишком велика — изменяем верхнюю границу
        else:
            upper_bound = mid

        # Проверяем, достигнут ли допустимый уровень опасности (модуль разницы меньше допустимого значения)
        if abs(danger_level) < user_danger_level:
            # Если да, возвращаем найденную глубину
            return mid


# Запрашиваем у пользователя максимально допустимый уровень опасности
max_danger = float(input("Введите максимально допустимый уровень опасности: "))

# Выполняем расчёт безопасной глубины
result = depth_calculation(max_danger)

# Выводим результат — глубину, на которой уровень опасности минимален и безопасен
print("Приблизительная глубина безопасной кладки: ", result)

<- Конец файла: E:\school\Coding\PyCharm\14.6.py
****************************************


Начало файла: E:\school\Coding\PyCharm\24.1.py ->

import os

# folder_name = 'project'
# file_name = 'my_file.txt'
#
# path = 'docs/{folder}/{file}'.format(
#     folder=folder_name,
#     file=file_name
# )
#
# print(path)
#
# rel_path = os.path.join('docs', folder_name, file_name)
# print(rel_path)
#
# abs_path = os.path.abspath(file_name)
# print(abs_path)




# print(os.path.abspath('My_penus'))
#
# project_list = ['PyCharm', 'Stepik']
#
# def print_dirs(project):
#     print('\nСодержимое директории', project)
#     for i_elem in os.listdir(project):
#         path = os.path.join(project, i_elem)
#         print('\t', path)
#
# for i_proj in project_list:
#     path_to_project = os.path.abspath(os.path.join('..', i_proj))
#     print_dirs(path_to_project)



# '''
# Задача 1. Сисадмин
# Вы работаете системным администратором в одной компании. На диске каждого сотрудника компании в специальной
# папке access лежит файл admin.bat. Этот файл предназначен для вас, и вам нужен путь до этого файла,
# причём как относительный, так и абсолютный. Недолго думая, вы решили написать небольшой скрипт,
# который закинете по сети к этому файлу.
#
# Напишите программу, которая выводит на экран относительный и абсолютный пути до файла admin.bat.
#
# Пример результата:
#
# Абсолютный путь до файла: C:\\Users\\Roman\\PycharmProjects\\Skillbox\\access\\admin.bat
#
# Относительный путь до файла: Skillbox\\access\\admin.bat
# '''
# abs_path = os.path.abspath(os.path.join('C:', '%HOMEPATH%', 'PycharmProjects', 'Skillbox', 'access', 'admin.bat'))
# relative_path = os.path.join('Skillbox', 'access', 'admin.bat')
#
# print('Абсолютный путь до файла: {}'.format(abs_path))
# print('Относительный путь до файла: {}'.format(relative_path))



# '''
# Задача 2. Содержимое
# Выберите любую директорию на своём диске и затем напишите программу,
# выводящую на экран абсолютные пути к файлам и папкам, которые находятся внутри этой директории.
#
# Результат программы на примере директории проекта python_basic:
#
# Содержимое каталога G:\PycharmProjects\python_basic
#     G:\PycharmProjects\python_basic\.git
#     G:\PycharmProjects\python_basic\.idea
#     G:\PycharmProjects\python_basic\Module14
#     G:\PycharmProjects\python_basic\Module15
#     G:\PycharmProjects\python_basic\Module16
#     G:\PycharmProjects\python_basic\Module17
#     G:\PycharmProjects\python_basic\Module18
#     G:\PycharmProjects\python_basic\Module19
#     G:\PycharmProjects\python_basic\Module20
#     G:\PycharmProjects\python_basic\Module21
#     G:\PycharmProjects\python_basic\Module22
# '''
#
# dir_for_DEgenerate = os.path.join("C:", os.sep, 'Games')
#
# def print_dirs(project):
#     print('Содержимое каталога {}'.format(project))
#     for _ in os.listdir(project):
#         path = os.path.join(project, _)
#         print('\t', path)
#
# if os.path.exists(dir_for_DEgenerate):
#     print_dirs(dir_for_DEgenerate)
# else:
#     print(f"Путь {dir_for_DEgenerate} не существует.")



# '''
# Задача 3. Корень диска
# Напишите программу, которая выводит на экран только корень диска, на котором запущен скрипт.
# Учтите, что скрипт может быть запущен где угодно и при любой вложенности папок.
#
# Результат программы на примере диска G:
#
# Корень диска: G:\\
# '''
#
# dir_root = os.path.abspath(os.sep)
# print(dir_root)
<- Конец файла: E:\school\Coding\PyCharm\24.1.py
****************************************


Начало файла: E:\school\Coding\PyCharm\24.2.py ->

import os

# # Скрипт для вывода содержимого папок
# project_list = ['Prod', 'PyCharm', 'Stepik']
#
# def print_dirs(project):
#     if os.path.exists(project):
#         print('\nСодержимое директории', project)
#         for i_elem in os.listdir(project):
#             path = os.path.join(project, i_elem)
#             print('\t', path)
#     else:
#         print('Директория', project, 'не существует')
#
# for i_proj in project_list:
#     path_to_project = os.path.abspath(os.path.join('..', i_proj))
#     print_dirs(path_to_project)

# def find_file(current_path, file_name, tab_count = 1):
#     tab = '__'
#     result = None
#     # print(f'{tab * (tab_count - 1)}Переходим в {current_path}')
#
#     for i_elem in os.listdir(current_path):
#         path = os.path.join(current_path, i_elem)
#         # print(f'{tab * tab_count}Смотрим {path}')
#
#         if file_name == i_elem:
#             return path
#
#         if os.path.isdir(path):
#             # print(f'{tab * tab_count}Это директория')
#             tab_count += 1
#             result = find_file(path, file_name, tab_count)
#             if result:
#                 break
#     return result
#
#
# file_path = find_file(os.path.abspath
#                       (os.path.join('..')),
#                       'lada_niva_history.pptx')
#
# if file_path:
#     print(f'\nАбсолютный путь к файлу {file_path}.')
# else:
#     print('Файл не найден!')



"""
Задача 1. Иконки
Андрей для себя хочет сделать экспериментальный сайт, где будет красиво отображаться вся структура его диска: 
папки одними иконками, файлы — другими. Поэтому ему нужен код, который поможет определить, какой тип иконки вставить.
Напишите программу, которая по заданному абсолютному пути определяет, на что указывает этот путь (на директорию, файл, 
или же путь является ссылкой), и выведите соответствующее сообщение. Если путь указывает на файл, то также выведите его 
размер (сколько он весит в байтах). Обеспечьте контроль ввода: проверка пути на существование. 

Подсказка: для вывода размера файла поищите соответствующий метод.

Пример 1:

Путь: C:\\Users\\Roman\\PycharmProjects\\Skillbox\\Module17\\lesson2.py
Это файл
Размер файла: 605 байт

Пример 2:

Путь: C:\\Users\\Roman\\PycharmProjects\\Skillbox\\Module17\\lesson2.py
Указанного пути не существует
"""

def size_of_file(file, style = 0):
    size_tup = ('Байт','КБ','МБ','ГБ','ТБ')
    file_size = os.path.getsize(file)

    def size_meter(size, counter = 0):
        if counter > 4:
            return None, None

        if size < 1024:
            return size, counter
        elif size >= 1024:
            counter += 1
            return size_meter(round(size / 1024, 2), counter)

    size, typel = size_meter(file_size)
    return f'Размер файла: {size} {size_tup[typel]}\n'

def type_of_file(link):

    if not os.path.exists(link):
        print('Указанного пути не существует\n')

    if os.path.isdir(link):
        print('Это директория\n')
    elif os.path.isfile(link):
        print('Это файл')
        print(size_of_file(link))
    elif os.path.islink(link):
        print(f'Это символьная ссылка\n')

# while True:
#     path = input('Путь: ')
#     type_of_file(path)




"""
Задача 2. Поиск файла
В уроке мы написали функцию, которая ищет нужный нам файл во всех подкаталогах указанной директории. Однако,
как мы понимаем, файлов с таким названием может быть несколько.
Напишите функцию, которая принимает на вход абсолютный путь до директории и имя файла, проходит по всем вложенным файлам
и папкам и выводит на экран все абсолютные пути с этим именем.

Пример:
Ищем в: C:/Users/Roman/PycharmProjects/Skillbox
Имя файла: lesson2

Найдены следующие пути:
C:/Users/Roman/PycharmProjects/Skillbox\Module15\lesson2.py
C:/Users/Roman/PycharmProjects/Skillbox\Module16\lesson2.py
C:/Users/Roman/PycharmProjects/Skillbox\Module17\lesson2.py
C:/Users/Roman/PycharmProjects/Skillbox\Module18\lesson2.py
C:/Users/Roman/PycharmProjects/Skillbox\Module19\lesson2.py
C:/Users/Roman/PycharmProjects/Skillbox\Module20\lesson2.py
C:/Users/Roman/PycharmProjects/Skillbox\Module21\lesson2.py
C:/Users/Roman/PycharmProjects/Skillbox\Module22\lesson2.py

Задания для практической работы не нужно отправлять на проверку.
"""

# search_dir = input('Ищем в: ')
search_dir = os.path.join('E:', os.path.sep, 'school', 'Coding')
# search_file = input('Имя файла: ')
search_file = 'Bot_0.1.py'

def file_search(dir, file):

    if not os.path.isdir(dir):
        print(f'{os.path.isdir(dir)} - не является директорией.')

    print('\nНайдены следующие пути:')

    def temp_func(dir, file):

        for i_elem in os.listdir(dir):
            if i_elem == file:
                print(os.path.join(dir, i_elem))
            elif os.path.isdir(os.path.join(dir, i_elem)):
                temp_func(os.path.join(dir, i_elem), file)

    temp_func(dir, file)


file_search(search_dir, search_file)

<- Конец файла: E:\school\Coding\PyCharm\24.2.py
****************************************


Начало файла: E:\school\Coding\PyCharm\24.3.py ->

import os
import random



file = os.path.join('E:', os.path.sep, 'school', 'Coding', 'PyCharm', 'speakers.txt')
speakers_file = open(file, 'r', encoding='utf8')
# print(speakers_file.read())   # Файл считывается целиком - может забить память, обьект становится пустым.
for i_line in speakers_file:    # Файл читается построчно, и работать можно с файлом построчно.
    print(i_line, end='')
print('\n\n')
speakers_file.close()           # Обязательно закрываем файл после использования



'''
Задача 1. Результаты
Одному программисту дали задачу для обработки неких результатов тестирования двух групп людей. Файл первой группы 
(group_1.txt) находится в папке task, файл второй группы (group_2.txt) — в папке Additional_info.

Содержимое файла group_1.txt
Бобровский Игорь 10
Дронов Александр 20
Жуков Виктор 30

Содержимое файла group_2.txt
Павленко Геннадий 20
Щербаков Владимир 35
Marley Bob 15

На экран нужно было вывести сумму очков первой группы, 
затем разность очков опять же первой группы 
и напоследок — произведение очков уже второй группы. 
Программист оказался не очень опытным, писал код наобум и даже не стал его проверять. 
И оказалось, этот код просто не работает. Вот что он написал:

file = open('E:\\task\group_1.txt', 'read')
summa = 0

for i_line in file:
    info = i_line.split()
    summa += info[2]

file = open('E:\\task\group_1.txt', 'read')
diff = 0

for i_line in file:
    info = i_line.split()
    diff -= info[2]

file_2 = open('E:\\task\group_2.txt', 'read')
compose = 0

for i_line in file:
    info = i_line.split()
    compose *= info[2]

print(summa)
print(diff)
print(compose)

Исправьте код для решения поставленной задачи. Для проверки результата создайте необходимые папки
(task, Additional_info, Dont touch me) на своём диске в соответствии с картинкой и также добавьте файлы group_1.txt и group_2.txt.
'''
group_1 = os.path.join('task', 'group_1.txt')
file = open(group_1, 'r', encoding='utf8')

summa = 0
for i_line in file:
    info = i_line.split()
    summa += int(info[2])
print(summa)
file.close()

file = open(group_1, 'r', encoding='utf8')
diff = 0

for i_line in file:
    info = i_line.split()
    if info[2].isnumeric():
        diff -= int(info[2])
print(diff)
file.close()

group_2 = os.path.join('task', 'Additional_info', 'group_2.txt')
file_2 = open(group_2, 'r', encoding='utf8')
compose = 1

for i_line in file_2:
    info = i_line.split()
    if info[2].isnumeric():
        compose *= int(info[2])
print(compose)
file_2.close()
print('\n\n')
'''
Задача 2. Поиск файла 2
Как мы помним, скрипты — это просто куча строк текста, хоть они и понятны только программисту. 
Таким образом, с ними можно работать точно так же, как и с обычными текстовыми файлами.

Используя функцию поиска файла из предыдущего урока, реализуйте программу, 
которая находит внутри указанного пути все файлы с искомым названием и выводит на экран текст одного из них 
(выбор можно сгенерировать случайно).

Подсказка: можно использовать, например, список для сохранения найденного пути.
'''

# search_dir = input('Ищем в: ')
search_dir = os.path.join('E:', os.path.sep, 'school', 'Coding')
# search_file = input('Имя файла: ')
search_file = 'Bot_0.1.py'

def file_search(dir, file):

    temp_list = []

    if not os.path.isdir(dir):
        print(f'{os.path.isdir(dir)} - не является директорией.')

    def temp_func(dir, file, list):

        for i_elem in os.listdir(dir):
            if i_elem == file:
                list.append(os.path.join(dir, i_elem))
            elif os.path.isdir(os.path.join(dir, i_elem)):
                temp_func(os.path.join(dir, i_elem), file, list)

    temp_func(dir, file, temp_list)
    print(random.choice(temp_list))

file_search(search_dir, search_file)

<- Конец файла: E:\school\Coding\PyCharm\24.3.py
****************************************

