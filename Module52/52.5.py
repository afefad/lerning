'''
1. Ва-банк
Функция поиска максимального элемента содержит небольшую ошибку
и не поддерживает нахождение максимального элемента в массиве из отрицательных чисел.
Например, если нужно найти самую маленькую сумму списания денег в банковской выписке.
Сможете поправить функцию?
'''

nums = [-1392, -1920, -7, -453, -91234]
print('Максимальный элемент в массиве из отрицательных чисел:', max(nums))

'''
2. Строгий преподаватель
Дан массив с количеством ошибок, которое совершили пользователи Skillbox в предыдущем задании. 
Сколько ошибок совершил максимально внимательный и аккуратный пользователь?

Верните количество ошибок.
'''

nums = [9, 4,1, 8, 7,13, 6, 5]

print('количество ошибок:', max(nums))

'''
3. Data Science Pro
Мы опросили несколько миллиардов пользователей Skillbox, чтобы узнать, 
сколько времени они тратят каждый день на изучение материалов курсов. 
Оказалось, где-то в диапазоне от трёх до восемнадцати секунд каждый день! 
Однако наш штатный Data Scientist не смог ответить на вопрос,
сколько времени в день в среднем тратит пользователь. 

Используйте переменную «аккумулятор» и цикл for, чтобы найти среднее значение в массиве целых чисел.

Верните среднее время.
'''

all: list = [9, 4,1, 8, 7,9, 4,1, 8, 7, 8, 7, 18, 3, 13, 6, 5]
mid: float = sum(all) / len(all)
print('Cреднее время:', mid.__round__(2))

'''
4. Утром — деньги, вечером — сайты
Фрилансер Геннадий много работает с разными заказчиками, делая для них сайты и мобильные приложения. 
Каждый день Гена всё своё рабочее время посвящает только одному из своих заказчиков, 
и за каждый день получает разную оплату. 
В конце дня он записывает доход в двумерный массив в своей голове: 
    там для каждого из заказчиков есть массив с доходами (в долларах) в день. 
Обратите внимание, что доходы бывают и отрицательными: иногда заказчики штрафуют Гену за сорванные сроки.
'''
payment={
    1: [95, 67, 13, 55, 44, 11, 10],   # Доходы от первого заказчика
    2: [7,190, 4, 44, 11, 1, 99],      # Доходы от второго заказчика
    3: [0, 5, -1, 500, 14, 90, 1]      # Доходы от третьего заказчика
}
temp_dict = {}
for i, pay in payment.items():
    if i not in temp_dict or temp_dict[i] > sum(pay) / len(pay):
        temp_dict = {i: sum(pay) / len(pay)}
for i, pay in temp_dict.items():
    print('Самый выгодный заказчик - заказчик №', i, 'с доходом', pay, 'долларов в день.')